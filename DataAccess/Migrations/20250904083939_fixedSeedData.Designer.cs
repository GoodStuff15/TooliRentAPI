// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ToolContext))]
    [Migration("20250904083939_fixedSeedData")]
    partial class fixedSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("PickedUpDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ReturnedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("WasPickedUp")
                        .HasColumnType("bit");

                    b.Property<bool>("WasReturned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Models.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Borrowers");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DelayPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DelayPrice = 15.00m,
                            Description = "Electric and battery-powered tools for construction and repair.",
                            Name = "Power Tools"
                        },
                        new
                        {
                            Id = 2,
                            DelayPrice = 5.00m,
                            Description = "Manual tools for everyday tasks and repairs.",
                            Name = "Hand Tools"
                        },
                        new
                        {
                            Id = 3,
                            DelayPrice = 8.50m,
                            Description = "Tools for gardening and landscaping.",
                            Name = "Garden Tools"
                        });
                });

            modelBuilder.Entity("Domain.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToolTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("ToolTypeId");

                    b.ToTable("Tools");
                });

            modelBuilder.Entity("Domain.Models.ToolType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoanDays")
                        .HasColumnType("int");

                    b.Property<int>("MinLoanDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ToolTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            MaxLoanDays = 7,
                            MinLoanDays = 1,
                            Name = "Cordless Drill"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            MaxLoanDays = 5,
                            MinLoanDays = 1,
                            Name = "Circular Saw"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            MaxLoanDays = 4,
                            MinLoanDays = 1,
                            Name = "Angle Grinder"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            MaxLoanDays = 10,
                            MinLoanDays = 1,
                            Name = "Hammer"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            MaxLoanDays = 10,
                            MinLoanDays = 1,
                            Name = "Screwdriver Set"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            MaxLoanDays = 8,
                            MinLoanDays = 1,
                            Name = "Wrench"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            MaxLoanDays = 3,
                            MinLoanDays = 1,
                            Name = "Lawn Mower"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            MaxLoanDays = 3,
                            MinLoanDays = 1,
                            Name = "Hedge Trimmer"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            MaxLoanDays = 7,
                            MinLoanDays = 1,
                            Name = "Shovel"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            MaxLoanDays = 7,
                            MinLoanDays = 1,
                            Name = "Rake"
                        });
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.HasOne("Domain.Models.Borrower", null)
                        .WithMany("Bookings")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Tool", b =>
                {
                    b.HasOne("Domain.Models.Booking", "Booking")
                        .WithMany("Tools")
                        .HasForeignKey("BookingId");

                    b.HasOne("Domain.Models.ToolType", "ToolType")
                        .WithMany("Tools")
                        .HasForeignKey("ToolTypeId");

                    b.Navigation("Booking");

                    b.Navigation("ToolType");
                });

            modelBuilder.Entity("Domain.Models.ToolType", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("ToolTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.Navigation("Tools");
                });

            modelBuilder.Entity("Domain.Models.Borrower", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("ToolTypes");
                });

            modelBuilder.Entity("Domain.Models.ToolType", b =>
                {
                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
