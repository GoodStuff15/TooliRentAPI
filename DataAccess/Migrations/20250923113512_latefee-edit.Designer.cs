// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ToolContext))]
    [Migration("20250923113512_latefee-edit")]
    partial class latefeeedit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingTool", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("ToolsId")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "ToolsId");

                    b.HasIndex("ToolsId");

                    b.ToTable("BookingTool");
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("ExtensionsCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LateFeeId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("PickedUpDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReturnedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<bool>("WasPickedUp")
                        .HasColumnType("bit");

                    b.Property<bool>("WasReturned")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BorrowerId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateOnly(2025, 9, 14),
                            ExtensionsCount = 0,
                            IsActive = true,
                            IsCancelled = false,
                            IsCompleted = false,
                            StartDate = new DateOnly(2025, 9, 10),
                            WasPickedUp = true,
                            WasReturned = false
                        });
                });

            modelBuilder.Entity("Domain.Models.Borrower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Borrowers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Wayvay 8",
                            Email = "gustav@swedbonk.se",
                            FirstName = "Gustav",
                            IsActive = true,
                            LastName = "Eriksson",
                            PhoneNumber = "070881220",
                            UserId = "9debe80a-df48-4525-94af-be01f484f601"
                        });
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DelayPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DelayPrice = 15.00m,
                            Description = "Electric and battery-powered tools for construction and repair.",
                            Name = "Power Tools"
                        },
                        new
                        {
                            Id = 2,
                            DelayPrice = 5.00m,
                            Description = "Manual tools for everyday tasks and repairs.",
                            Name = "Hand Tools"
                        },
                        new
                        {
                            Id = 3,
                            DelayPrice = 8.50m,
                            Description = "Tools for gardening and landscaping.",
                            Name = "Garden Tools"
                        });
                });

            modelBuilder.Entity("Domain.Models.LateFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int?>("BorrowerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateIncurred")
                        .HasColumnType("date");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BorrowerId");

                    b.ToTable("LateFees");
                });

            modelBuilder.Entity("Domain.Models.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToolTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ToolTypeId");

                    b.ToTable("Tools");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "High-performance cordless drill for heavy-duty tasks.",
                            IsAvailable = true,
                            Name = "Makita Cordless Drill",
                            ToolTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Reliable cordless drill suitable for home and professional use.",
                            IsAvailable = true,
                            Name = "Bosch Power Drill",
                            ToolTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "Precision circular saw for clean and accurate cuts.",
                            IsAvailable = true,
                            Name = "DeWalt Circular Saw",
                            ToolTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Lightweight circular saw ideal for quick jobs.",
                            IsAvailable = true,
                            Name = "Ryobi Circular Saw",
                            ToolTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "Durable angle grinder for metal and masonry work.",
                            IsAvailable = true,
                            Name = "Milwaukee Angle Grinder",
                            ToolTypeId = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "Compact angle grinder for detailed grinding tasks.",
                            IsAvailable = true,
                            Name = "Hitachi Angle Grinder",
                            ToolTypeId = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "Classic claw hammer for carpentry and repairs.",
                            IsAvailable = true,
                            Name = "Stanley Claw Hammer",
                            ToolTypeId = 4
                        },
                        new
                        {
                            Id = 8,
                            Description = "Heavy-duty framing hammer for construction projects.",
                            IsAvailable = true,
                            Name = "Estwing Framing Hammer",
                            ToolTypeId = 4
                        },
                        new
                        {
                            Id = 9,
                            Description = "Precision screwdriver set for electronics and small repairs.",
                            IsAvailable = true,
                            Name = "Wiha Screwdriver Set",
                            ToolTypeId = 5
                        },
                        new
                        {
                            Id = 10,
                            Description = "Versatile screwdriver set for household tasks.",
                            IsAvailable = true,
                            Name = "Craftsman Screwdriver Set",
                            ToolTypeId = 5
                        },
                        new
                        {
                            Id = 11,
                            Description = "Adjustable wrench for plumbing and mechanical work.",
                            IsAvailable = true,
                            Name = "Klein Adjustable Wrench",
                            ToolTypeId = 6
                        },
                        new
                        {
                            Id = 12,
                            Description = "Heavy-duty pipe wrench for tough jobs.",
                            IsAvailable = true,
                            Name = "Irwin Pipe Wrench",
                            ToolTypeId = 6
                        },
                        new
                        {
                            Id = 13,
                            Description = "Efficient lawn mower for medium to large gardens.",
                            IsAvailable = true,
                            Name = "Honda Lawn Mower",
                            ToolTypeId = 7
                        },
                        new
                        {
                            Id = 14,
                            Description = "Eco-friendly electric mower for quiet operation.",
                            IsAvailable = true,
                            Name = "Greenworks Electric Mower",
                            ToolTypeId = 7
                        },
                        new
                        {
                            Id = 15,
                            Description = "Cordless hedge trimmer for easy garden maintenance.",
                            IsAvailable = true,
                            Name = "Black+Decker Hedge Trimmer",
                            ToolTypeId = 8
                        },
                        new
                        {
                            Id = 16,
                            Description = "Professional hedge trimmer for precise cutting.",
                            IsAvailable = true,
                            Name = "Stihl Hedge Trimmer",
                            ToolTypeId = 8
                        },
                        new
                        {
                            Id = 17,
                            Description = "Sturdy garden shovel for digging and planting.",
                            IsAvailable = true,
                            Name = "Fiskars Garden Shovel",
                            ToolTypeId = 9
                        },
                        new
                        {
                            Id = 18,
                            Description = "Heavy-duty digging shovel for landscaping projects.",
                            IsAvailable = true,
                            Name = "Ames Digging Shovel",
                            ToolTypeId = 9
                        },
                        new
                        {
                            Id = 19,
                            Description = "Wide leaf rake for efficient yard cleanup.",
                            IsAvailable = true,
                            Name = "True Temper Leaf Rake",
                            ToolTypeId = 10
                        },
                        new
                        {
                            Id = 20,
                            Description = "Durable garden rake for soil preparation.",
                            IsAvailable = true,
                            Name = "Garant Garden Rake",
                            ToolTypeId = 10
                        });
                });

            modelBuilder.Entity("Domain.Models.ToolType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaxLoanDays")
                        .HasColumnType("int");

                    b.Property<int>("MinLoanDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ToolTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            MaxLoanDays = 7,
                            MinLoanDays = 1,
                            Name = "Cordless Drill"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            MaxLoanDays = 5,
                            MinLoanDays = 1,
                            Name = "Circular Saw"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            MaxLoanDays = 4,
                            MinLoanDays = 1,
                            Name = "Angle Grinder"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            MaxLoanDays = 10,
                            MinLoanDays = 1,
                            Name = "Hammer"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            MaxLoanDays = 10,
                            MinLoanDays = 1,
                            Name = "Screwdriver Set"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            MaxLoanDays = 8,
                            MinLoanDays = 1,
                            Name = "Wrench"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            MaxLoanDays = 3,
                            MinLoanDays = 1,
                            Name = "Lawn Mower"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            MaxLoanDays = 3,
                            MinLoanDays = 1,
                            Name = "Hedge Trimmer"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            MaxLoanDays = 7,
                            MinLoanDays = 1,
                            Name = "Shovel"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            MaxLoanDays = 7,
                            MinLoanDays = 1,
                            Name = "Rake"
                        });
                });

            modelBuilder.Entity("Infrastructure.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookingTool", b =>
                {
                    b.HasOne("Domain.Models.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Tool", null)
                        .WithMany()
                        .HasForeignKey("ToolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Booking", b =>
                {
                    b.HasOne("Domain.Models.Borrower", null)
                        .WithMany("Bookings")
                        .HasForeignKey("BorrowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.LateFee", b =>
                {
                    b.HasOne("Domain.Models.Borrower", null)
                        .WithMany("LateFees")
                        .HasForeignKey("BorrowerId");
                });

            modelBuilder.Entity("Domain.Models.Tool", b =>
                {
                    b.HasOne("Domain.Models.ToolType", "ToolType")
                        .WithMany("Tools")
                        .HasForeignKey("ToolTypeId");

                    b.Navigation("ToolType");
                });

            modelBuilder.Entity("Domain.Models.ToolType", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("ToolTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Borrower", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("LateFees");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("ToolTypes");
                });

            modelBuilder.Entity("Domain.Models.ToolType", b =>
                {
                    b.Navigation("Tools");
                });
#pragma warning restore 612, 618
        }
    }
}
